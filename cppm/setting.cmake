macro(cppm_setting)
    cmake_parse_arguments(ARG "NO_MESSAGE" "" "" ${ARGN})
    include(CMakeDependentOption)
    if(NOT CMAKE_PROJECT_NAME MATCHES "${PROJECT_NAME}")
        set(SUB_PROJECT TRUE)
        set(${PROJECT_NAME}_NO_MESSAGE TRUE)
    else()
        set(SUB_PROJECT FALSE)
    endif()
    if(ARG_NO_MESSAGE)
        set(${PROJECT_NAME}_NO_MESSAGE TRUE)
    endif()

    if(NOT SUB_PROJECT)
    cppm_print("Target: ${PROJECT_NAME} [Type:${cppm_build_type}, Cppm:${CPPM_VERSION}, CMake:${CMAKE_VERSION}]")
    cppm_print("System: ${CMAKE_HOST_SYSTEM_PROCESSOR}-${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}")
    cppm_print("Compiler: ${CMAKE_CXX_COMPILER_ID}-${CMAKE_CXX_COMPILER_VERSION}")
    cppm_print("Generator: ${CMAKE_GENERATOR}")
    cppm_print("Toolchains: ${CMAKE_TOOLCHAIN_FILE}")

    if(cppm_detect_vcpkg)
        cppm_print("Detect Vcpkg: ${vcpkg_path}")
    endif()
    set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
    set(CMAKE_FIND_PACKAGE_SORT_ORDER NATURAL)
    cppm_print("cppm_root: ${CPPM_ROOT}")
    endif()
endmacro()

macro(_cppm_ccache)
    option(USE_CCACHE "use ccache option default is on" ON)
    if(USE_CCACHE)
        find_program(CCACHE_EXE ccache)
        if(NOT CCACHE_EXE-NOTFOUND)
            set(CMAKE_CXX_COMPILER_LAUNCHER ccache)
        endif()
    endif()
endmacro()

macro(_cppm_rpath) # macos has RPATH bug
    set(CMAKE_SKIP_BUILD_RPATH FALSE)
    set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
    list(APPEND CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
    list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
    if("${isSystemDir}" STREQUAL "-1")
        list(APPEND CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
    endif("${isSystemDir}" STREQUAL "-1")
endmacro()

# from vcpkg https://github.com/microsoft/vcpkg/blob/master/scripts/buildsystems/vcpkg.cmake
macro(_cppm_arch_flag)
if(cppm_target_arch)
elseif(CMAKE_GENERATOR_PLATFORM MATCHES "^[Ww][Ii][Nn]32$")
    set(cppm_target_arch x86)
elseif(CMAKE_GENERATOR_PLATFORM MATCHES "^[Xx]64$")
    set(cppm_target_arch x64)
elseif(CMAKE_GENERATOR_PLATFORM MATCHES "^[Aa][Rr][Mm]$")
    set(cppm_target_arch arm)
elseif(CMAKE_GENERATOR_PLATFORM MATCHES "^[Aa][Rr][Mm]64$")
    set(cppm_target_arch arm64)
else()
    if(CMAKE_GENERATOR MATCHES "^Visual Studio 14 2015 Win64$")
        set(cppm_target_arch x64)
    elseif(CMAKE_GENERATOR MATCHES "^Visual Studio 14 2015 ARM$")
        set(cppm_target_arch arm)
    elseif(CMAKE_GENERATOR MATCHES "^Visual Studio 14 2015$")
        set(cppm_target_arch x86)
    elseif(CMAKE_GENERATOR MATCHES "^Visual Studio 15 2017 Win64$")
        set(cppm_target_arch x64)
    elseif(CMAKE_GENERATOR MATCHES "^Visual Studio 15 2017 ARM$")
        set(cppm_target_arch arm)
    elseif(CMAKE_GENERATOR MATCHES "^Visual Studio 15 2017$")
        set(cppm_target_arch x86)
    elseif(CMAKE_GENERATOR MATCHES "^Visual Studio 16 2019$")
        set(cppm_target_arch x64)
    else()
        find_program(cl_path cl)
        if(cl_path MATCHES "amd64/cl.exe$" OR cl_path MATCHES "x64/cl.exe$")
            set(cppm_target_arch x64)
        elseif(cl_path MATCHES "arm/cl.exe$")
            set(cppm_target_arch arm)
        elseif(cl_path MATCHES "arm64/cl.exe$")
            set(cppm_target_arch arm64)
        elseif(cl_path MATCHES "bin/cl.exe$" OR cl_path MATCHES "x86/cl.exe$")
            set(cppm_target_arch x86)
        elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin" AND DEFINED CMAKE_SYSTEM_NAME AND NOT CMAKE_SYSTEM_NAME STREQUAL "Darwin")
            list(LENGTH CMAKE_OSX_ARCHITECTURES arch_count)
            if(arch_count EQUAL 0)
                cppm_warning_print("Unable to determine target architecture. "
                                   "Consider providing a value for the CMAKE_OSX_ARCHITECTURES cache variable. ")
            else()
                if(arch_count GREATER 1)
                    cppm_warning_print("Detected more than one target architecture. Using the first one.")
                endif()
                list(GET CMAKE_OSX_ARCHITECTURES 0 target_arch)
                if(target_arch STREQUAL arm64)
                    set(cppm_target_arch arm64)
                elseif(target_arch STREQUAL arm64s)
                    set(cppm_target_arch arm64s)
                elseif(target_arch STREQUAL armv7s)
                    set(cppm_target_arch armv7s)
                elseif(target_arch STREQUAL armv7)
                    set(cppm_target_arch arm)
                elseif(target_arch STREQUAL x86_64)
                    set(cppm_target_arch x64)
                elseif(target_arch STREQUAL i386)
                    set(cppm_target_arch x86)
                else()
                    cppm_warning_print("Unable to determine target architecture")
                endif()
            endif()
        elseif(CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "x86_64")
            set(cppm_target_arch x64)
        else()
            cppm_warning_print("Unable to determine target architecture")
        endif()
    endif()
endif()

endmacro()

# from vcpkg https://github.com/microsoft/vcpkg/blob/master/scripts/buildsystems/vcpkg.cmake
macro(_cppm_os_flag)
    if(cppm_target_platform)
    elseif(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore" OR CMAKE_SYSTEM_NAME STREQUAL "WindowsPhone")
        set(cppm_target_platform uwp)
        set(cppm_target_base_platform windows)
    elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux" OR (NOT CMAKE_SYSTEM_NAME AND CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux"))
        set(cppm_target_platform linux)
        set(cppm_target_base_platform unix)
    elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin" OR (NOT CMAKE_SYSTEM_NAME AND CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin"))
        set(cppm_target_platform osx)
        set(cppm_target_base_platform unix)
    elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows" OR (NOT CMAKE_SYSTEM_NAME AND CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows"))
        set(cppm_target_platform windows)
        set(cppm_target_base_platform windows)
    elseif(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" OR (NOT CMAKE_SYSTEM_NAME AND CMAKE_HOST_SYSTEM_NAME STREQUAL "FreeBSD"))
        set(cppm_target_platform freebsd)
        set(cppm_target_base_platform unix)
    endif()
endmacro()

macro(_cppm_generator)
    if(cppm_generator_type)
    elseif(CMAKE_GENERATOR MATCHES "^Unix Makefiles$")
        set(cppm_generator_type "make")
    elseif(CMAKE_GENERATOR MATCHES "^Ninja$")
        set(cppm_generator_type "ninja")
    elseif(CMAKE_GENERATOR MATCHES "^Visual Studio.*$")
        set(cppm_generator_type "visual-studio")
    elseif(CMAKE_GENERATOR MATCHES "^Xcode$")
        set(cppm_generator_type "xcode")
    endif()
endmacro()

macro(_cppm_build_type)
    default_cache(CMAKE_BUILD_TYPE Debug STRING)
    string(TOLOWER ${CMAKE_BUILD_TYPE} lower_build_type) 
    set_cache_check(cppm_build_type "${lower_build_type}" STRING)
    if(_is_same)
        set_cache(cppm_build_type_change FALSE BOOL)
    else()
        set_cache(cppm_build_type_change TRUE BOOL)
    endif()

    if(cppm_build_type STREQUAL "debug")
        set(cppm_is_debug ON)
    else()
        set(cppm_is_debug OFF)
    endif()

    if(cppm_target_base_platform STREQUAL "unix")
        default_cache(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/Debug STRING)
        default_cache(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/Release STRING)
        default_cache(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/Debug STRING)
        default_cache(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/Release STRING)
        default_cache(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/Debug STRING)
        default_cache(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/Release STRING)
    endif()
endmacro()

macro(_cppkg_define_property)
    define_property(TARGET PROPERTY CPPM_DEPENDENCIES INHERITED
        BRIEF_DOCS "Cppm package dependencies list"
        FULL_DOCS  "Cppm package dependencies list"
    )
endmacro()

